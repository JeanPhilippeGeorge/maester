<#
.SYNOPSIS
    Checks state of preset security policies

.DESCRIPTION
    Emails identified as containing malware SHALL be quarantined or dropped.

.EXAMPLE
    Test-MtCisaMalwareAction

    Returns true if standard and strict protection is on

.LINK
    https://maester.dev/docs/commands/Test-MtCisaMalwareAction
#>
function Test-MtCisaMalwareAction {
    [CmdletBinding()]
    [OutputType([bool])]
    param()

    if (!(Test-MtConnection ExchangeOnline)) {
        Add-MtTestResultDetail -SkippedBecause NotConnectedExchange
        return $null
    }

    # Need to simplify that code and cache the result so it can be reused easily

    # Would be a plus to sort the policies by priority as in the portal
    #   Get-MalwareFilterRule returns a Priority property
    #   Get-EOPProtectionPolicyRule returns a Priority Property but it's in reverse order ...
    #   Strict is first, Standard is second, then priority, Default is last
    $policies = Get-MtExo -Request MalwareFilterPolicy
    $rules = Get-MtExo -Request MalwareFilterRule
    $PresetSecurityPolicies = Get-EOPProtectionPolicyRule | Select-Object Identity, MalwareFilterPolicy, State
    $IsStandardPresetSecurityPolicyEnabled = $null -ne ($PresetSecurityPolicies | Where-Object { $_.RecommendedPolicyType -eq 'Standard' -and $_.State -eq 'Enabled' })
    $IsStrictPresetSecurityPolicyEnabled = $null -ne ($PresetSecurityPolicies | Where-Object { $_.RecommendedPolicyType -eq 'Strict' -and $_.State -eq 'Enabled' })
    # $failingPolicies = $policies | Where-Object { $_.QuarantineTag -ne "AdminOnlyAccessPolicy" }

    # $testResult = ($failingPolicies | Measure-Object).Count -eq 0

    $testResult = $true

    $portalLink = "https://security.microsoft.com/antimalwarev2"
    $passResult = "✅ Pass"
    $failResult = "❌ Fail"
    $skipResult = "🗄️ Skip"

    $result = "| Policy name | Enabled | Quarantine Tag | Result |`n"
    $result += "| --- | --- | --- | --- |`n"
    foreach ($item in $policies | Sort-Object -Property Identity) {
        # Wow :-( Am I missing an easy way to do that?
        $isPolicyEnabled = if ($item.RecommendedPolicyType -eq 'Strict') {
            $IsStrictPresetSecurityPolicyEnabled
        } elseif ($item.RecommendedPolicyType -eq 'Standard') {
            $IsStandardPresetSecurityPolicyEnabled
        } elseif ($item.IsDefault) {
            $true
        } else {
            # Apparently it's possible to create a policy without rule.
            # It won't be shown in the portal but we can get it with Powershell ...
            $rule = $rules | Where-Object { $_.Identity -eq $item.Identity }
            $null -eq $rule -or $rule.State -eq 'Enabled'
        }

        if (-not $isPolicyEnabled) {
            $result += "| $($item.Identity) | $false | $($item.QuarantineTag) | $($skipResult) |`n"
        } elseif ($item.QuarantineTag -eq "AdminOnlyAccessPolicy") {
            $result += "| $($item.Identity) | $true | $($item.QuarantineTag) | $($passResult) |`n"
        } else {
            $testResult = $false
            $result += "| $($item.Identity) | $true | $($item.QuarantineTag) | $($failResult) |`n"
        }
    }

    if ($testResult) {
        $testResultMarkdown = "Well done. All the SafeAttachments policies in your tenant have the property QuarantinePolicy set to 'AdminOnlyAccessPolicy' ($portalLink).`n`n%TestResult%"
    } else {
        $testResultMarkdown = "Your tenant does not have all the SafeAttachments policies with the property QuarantinePolicy set to 'AdminOnlyAccessPolicy' ($portalLink).`n`n%TestResult%"
    }

    $testResultMarkdown = $testResultMarkdown -replace "%TestResult%", $result

    Add-MtTestResultDetail -Result $testResultMarkdown

    return $testResult
}