<#
.SYNOPSIS
    Checks state of preset security policies

.DESCRIPTION
    Emails identified as containing malware SHALL be quarantined or dropped.

.EXAMPLE
    Test-MtCisaMalwareAction

    Returns true if standard and strict protection is on

.LINK
    https://maester.dev/docs/commands/Test-MtCisaMalwareAction
#>
function Test-MtCisaMalwareAction {
    [CmdletBinding()]
    [OutputType([bool])]
    param()

    Write-Verbose 0
    if (!(Test-MtConnection ExchangeOnline)) {
        Add-MtTestResultDetail -SkippedBecause NotConnectedExchange
        return $null
    }

    # Should Get-MtExo return that?
    # Should I create a new function?
    $getPolicies = {
        $policies = Get-MtExo -Request MalwareFilterPolicy
        $rules = Get-MtExo -Request MalwareFilterRule
        $presetSecurityPolicies = Get-MtExo -Request EOPProtectionPolicyRule
        $isStrictPresetSecurityPolicyEnabled = $null -ne ($presetSecurityPolicies | Where-Object { $_.Name -match 'Strict' -and $_.State -eq 'Enabled' })
        $isStandardPresetSecurityPolicyEnabled = $null -ne ($presetSecurityPolicies | Where-Object { $_.Name -match 'Standard' -and $_.State -eq 'Enabled' })

        $items = foreach ($item in $policies) {
            # Wow :-( Am I missing an easy way to do that?
            $isEnabled, $priority = if ($item.RecommendedPolicyType -eq 'Strict') {
                $isStrictPresetSecurityPolicyEnabled, -2
            } elseif ($item.RecommendedPolicyType -eq 'Standard') {
                $isStandardPresetSecurityPolicyEnabled, -1
            } elseif ($item.IsDefault) {
                $true, 99999
            } else {
                $rule = $rules | Where-Object { $_.Identity -eq $item.Identity }
                if ($null -eq $rule) {
                    # Apparently it's possible to create a policy without rule.
                    # It won't be shown in the portal but we can get it with Powershell ...
                    # No idea if it's enabled or not ...
                    $true, 90000
                } else {
                    # Parentheses are required here
                    ($rule.State -eq 'Enabled'), $rule.Priority
                }
            }

            $item | Add-Member -NotePropertyMembers @{IsEnabled = $isEnabled; Priority = $priority} -PassThru
        }
        $items | Sort-Object Priority
    }

    $policies = Invoke-Command -ScriptBlock $getPolicies

    $failingPolicies = $policies | Where-Object { $_.IsEnabled -and $_.QuarantineTag -ne "AdminOnlyAccessPolicy" }
    $testResult = ($failingPolicies | Measure-Object).Count -eq 0

    $portalLink = "https://security.microsoft.com/antimalwarev2"
    $passResult = "✅ Pass"
    $failResult = "❌ Fail"
    $skipResult = "🗄️ Skip"

    $result = "| Policy name | Enabled | Quarantine Tag | Result |`n"
    $result += "| --- | --- | --- | --- |`n"
    foreach ($item in $policies) {
        if (-not $item.IsEnabled) {
            $result += "| $($item.Identity) | $false | $($item.QuarantineTag) | $($skipResult) |`n"
        } elseif ($item.QuarantineTag -eq "AdminOnlyAccessPolicy") {
            $result += "| $($item.Identity) | $true | $($item.QuarantineTag) | $($passResult) |`n"
        } else {
            $result += "| $($item.Identity) | $true | $($item.QuarantineTag) | $($failResult) |`n"
        }
    }

    if ($testResult) {
        $testResultMarkdown = "Well done. All the SafeAttachments policies in your tenant have the property QuarantinePolicy set to 'AdminOnlyAccessPolicy' ($portalLink).`n`n%TestResult%"
    } else {
        $testResultMarkdown = "Your tenant does not have all the SafeAttachments policies with the property QuarantinePolicy set to 'AdminOnlyAccessPolicy' ($portalLink).`n`n%TestResult%"
    }

    $testResultMarkdown = $testResultMarkdown -replace "%TestResult%", $result

    Add-MtTestResultDetail -Result $testResultMarkdown

    return $testResult
}